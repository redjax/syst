#!/usr/bin/env bash
set -euo pipefail

# Get the directory of this script
THIS_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Find the git root directory
ROOT_DIR="$(git -C "$THIS_DIR" rev-parse --show-toplevel)"

# Extract Go version from the first 'go <version>' line in go.mod
GO_VERSION="$(grep '^go ' "$ROOT_DIR/go.mod" | head -n1 | awk '{print $2}')"

if [[ -z "$GO_VERSION" ]]; then
    echo "[ERROR] Unable to determine Go version from go.mod. Try again with --go-version x.x.x" >&2
    exit 1
fi

# Define Dockerfile path relative to git root
DOCKERFILE_PATH="$ROOT_DIR/containers/dockerfiles/vulncheck.Dockerfile"

# Default output directory for vulnerability reports
OUTPUT_DIR="$ROOT_DIR/vulnerability-reports"

# Parse CLI arguments for overrides
while [[ $# -gt 0 ]]; do
    case "$1" in
        --output-dir)
            if [[ -z "${2-}" ]]; then
                echo "[ERROR] --output-dir provided but no directory path given" >&2
                exit 1
            fi
            OUTPUT_DIR="$2"
            shift 2
            ;;
        --go-version)
            if [[ -z "${2-}" ]]; then
                echo "[ERROR] --go-version provided but no Go version given" >&2
                exit 1
            fi
            GO_VERSION="$2"
            shift 2
            ;;
        *)
            echo "[ERROR] Unknown argument: $1" >&2
            exit 1
            ;;
    esac
done

## Ensure output directory exists
mkdir -p "$OUTPUT_DIR"

echo "Using Go version: $GO_VERSION"
echo "Dockerfile path: $DOCKERFILE_PATH"
echo "Output directory: $OUTPUT_DIR"

## Build Docker image with go version build-arg and tag as vulncheck
docker build \
    --build-arg GOLANG_IMG_VERSION="$GO_VERSION" \
    -f "$DOCKERFILE_PATH" \
    -t vulncheck \
    "$ROOT_DIR"

## Run the container, mount repo read-only at /repo, mount output dir to /scans in container
docker run --rm \
    -v "$ROOT_DIR":/repo:ro \
    -v "$OUTPUT_DIR":/scans \
    vulncheck
