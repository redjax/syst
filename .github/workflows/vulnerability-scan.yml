---
name: Vulnerability Scan

on:
  workflow_call: {}
  workflow_dispatch: {}
  #  Disabled until I can get it to work
  # schedule:
    ## Every day at 1am
    # - cron: '0 1 * * *'

jobs:
  vulnerability-scan:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Extract Go version from go.mod
        id: go-version
        run: |
          GO_VERSION=$(grep '^go ' go.mod | awk '{print $2}')
          echo "version=$GO_VERSION" >> $GITHUB_OUTPUT
          echo "Detected Go version: $GO_VERSION"
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ steps.go-version.outputs.version }}
      
      - name: Run vulnerability scan script
        id: vuln-scan
        continue-on-error: true
        run: |
          chmod +x ./scripts/vuln-scan.sh
          
          ## Use a fixed directory name for CI to make artifact paths predictable
          ./scripts/vuln-scan.sh --output-dir vulnerability-reports/ci-scan
          SCAN_EXIT=$?
          echo "exit_code=$SCAN_EXIT" >> $GITHUB_OUTPUT
          
          ## Find the timestamped directory created by the script
          LATEST_SCAN=$(find vulnerability-reports/ci-scan -mindepth 1 -maxdepth 1 -type d | sort -r | head -n1)
          
          echo "scan_dir=$LATEST_SCAN" >> $GITHUB_OUTPUT
          echo "Latest scan directory: $LATEST_SCAN"
          
          exit $SCAN_EXIT
      
      - name: Upload vulnerability reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-reports
          path: vulnerability-reports/ci-scan/
          retention-days: 30
      
      - name: Check for actual CVE vulnerabilities
        id: check-vulns
        if: always()
        run: |
          ## Find the latest scan directory
          LATEST_SCAN=$(find vulnerability-reports/ci-scan -mindepth 1 -maxdepth 1 -type d | sort -r | head -n1)
          GOVULNCHECK_REPORT="$LATEST_SCAN/govulncheck-report.txt"
          
          if [ ! -f "$GOVULNCHECK_REPORT" ]; then
            echo "has_vulns=unknown" >> $GITHUB_OUTPUT
            echo "Could not find govulncheck report"
            exit 0
          fi
          
          ## Check if govulncheck found actual vulnerabilities (not just call graphs)
          if grep -q "No vulnerabilities found" "$GOVULNCHECK_REPORT"; then
            echo "has_vulns=false" >> $GITHUB_OUTPUT
            echo "No CVE vulnerabilities found"
          else
            # Check if there are actual vulnerability findings (not just traces)
            if grep -qE "^(Vulnerability|Found)" "$GOVULNCHECK_REPORT"; then
              echo "has_vulns=true" >> $GITHUB_OUTPUT
              echo "CVE vulnerabilities detected"
            else
              echo "has_vulns=false" >> $GITHUB_OUTPUT
              echo "No actionable vulnerabilities found (only stdlib traces)"
            fi
          fi
      
      - name: Display scan results
        if: always()
        run: |
          ## Find the latest scan directory
          LATEST_SCAN=$(find vulnerability-reports/ci-scan -mindepth 1 -maxdepth 1 -type d | sort -r | head -n1)
          
          echo "::group::üìä Govulncheck Results"
          if [ -f "$LATEST_SCAN/govulncheck-report.txt" ]; then
            cat "$LATEST_SCAN/govulncheck-report.txt"
          else
            echo "No govulncheck report found in $LATEST_SCAN"
          fi
          echo "::endgroup::"
          
          echo "::group::üîí Gosec Results (Last 40 lines)"
          if [ -f "$LATEST_SCAN/gosec-report.txt" ]; then
            tail -n 40 "$LATEST_SCAN/gosec-report.txt"
          else
            echo "No gosec report found in $LATEST_SCAN"
          fi
          echo "::endgroup::"
      
      - name: Fail if CVE vulnerabilities found
        if: steps.check-vulns.outputs.has_vulns == 'true'
        run: |
          LATEST_SCAN=$(find vulnerability-reports/ci-scan -mindepth 1 -maxdepth 1 -type d | sort -r | head -n1)
          
          echo "::error title=CVE Vulnerabilities Detected::Your dependencies have known security vulnerabilities"
          echo ""
          echo "======================================"
          echo "‚ùå VULNERABILITY SCAN FAILED"
          echo "======================================"
          echo ""
          echo "üö® ACTION REQUIRED: CVE vulnerabilities found in dependencies"
          echo ""
          echo "üìã View detailed reports:"
          echo "  1. Click the 'Summary' tab above"
          echo "  2. Download the 'vulnerability-reports' artifact"
          echo "  3. Navigate to the timestamped scan directory"
          echo "  4. Open: govulncheck-report.txt"
          echo ""
          echo "üìÇ Report location: $LATEST_SCAN"
          echo ""
          echo "üîß How to fix:"
          echo "  - Run locally: ./scripts/vuln-scan.sh"
          echo "  - Update dependencies: go get -u ./..."
          echo "  - Or update specific dependencies listed in the report"
          echo ""
          echo "üí° Note: gosec findings are code quality issues, not CVEs"
          echo ""
          exit 1
